Web scraping is a computer software technique of extracting information from websites.

urllib2 is a Python module for fetching URLs (Uniform Resource Locators).

==========================================================================
Fetching URLs ------------------------------------------------

urlopen: fetching URLs using a variety of different protocols

import urllib2
response = urllib2.urlopen('http://python.org/')
html = response.read()



HTTP is based on requests and responses - the client makes requests and servers send responses. urllib2 mirrors this with a Request object which represents the HTTP request you are making.

	**********************************************
	import urllib2

	req = urllib2.Request('http://www.voidspace.org.uk')
	response = urllib2.urlopen(req)
	the_page = response.read()
	**********************************************

Data ------------------------------------------------

POST request

	**********************************************
	import urllib
	import urllib2

	url = 'http://www.someserver.com/cgi-bin/register.cgi'
	values = {'name' : 'Michael Foord',
			  'location' : 'Northampton',
			  'language' : 'Python' }

	data = urllib.urlencode(values)
	req = urllib2.Request(url, data)
	response = urllib2.urlopen(req)
	the_page = response.read()
	**********************************************


One way in which GET and POST requests differ is that POST requests often have Ågside-effectsÅh: they change the state of the system in some way (for example by placing an order with the website for a hundredweight of tinned spam to be delivered to your door).

Though the HTTP standard makes it clear that POSTs are intended to always cause side-effects, and GET requests never to cause side-effects, nothing prevents a GET request from having side-effects, nor a POST requests from having no side-effects. Data can also be passed in an HTTP GET request by encoding it in the URL itself.

	**********************************************
	>>> import urllib2
	>>> import urllib
	>>> data = {}
	>>> data['name'] = 'Somebody Here'
	>>> data['location'] = 'Northampton'
	>>> data['language'] = 'Python'
	>>> url_values = urllib.urlencode(data)
	>>> print url_values  # The order may differ. 
	name=Somebody+Here&language=Python&location=Northampton
	>>> url = 'http://www.example.com/example.cgi'
	>>> full_url = url + '?' + url_values
	>>> data = urllib2.urlopen(full_url)
	**********************************************

Headers ------------------------------------------------

User-Agent header : some websites dislike being browsed by programs, or send different versions to different browsers. By default urllib2 identifies itself as Python-urllib/x.y (where x and y are the major and minor version numbers of the Python release, e.g. Python-urllib/2.5), which may confuse the site, or just plain not work. The way a browser identifies itself is through the User-Agent header. When you create a Request object you can pass a dictionary of headers in. The following example makes the same request as above, but identifies itself as a version of Internet Explorer.

	'Mozilla/5.0 (Windows; U; Windows NT 5.1; it; rv:1.8.1.11) Gecko/20071127 Firefox/2.0.0.11',
	'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1'
	'Opera/9.25 (Windows NT 5.1; U; en)',
	'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)',
	'Mozilla/5.0 (compatible; Konqueror/3.5; Linux) KHTML/3.5.5 (like Gecko) (Kubuntu)',
	'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.0.12) Gecko/20070731 Ubuntu/dapper-security Firefox/1.5.0.12',
	'Lynx/2.8.5rel.1 libwww-FM/2.14 SSL-MM/1.4.1 GNUTLS/1.2.9',
	'Mozilla/5.0 (X11; Linux i686) AppleWebKit/535.7 (KHTML, like Gecko) Ubuntu/11.04 Chromium/16.0.912.77 Chrome/16.0.912.77 Safari/535.7',
	'Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:10.0) Gecko/20100101 Firefox/10.0 ',

	
	**********************************************
	import urllib
	import urllib2

	url = 'http://www.someserver.com/cgi-bin/register.cgi'
	user_agent = 'Mozilla/5.0 (Windows NT 6.1; Win64; x64)'
	values = {'name': 'Michael Foord',
			  'location': 'Northampton',
			  'language': 'Python' }
	headers = {'User-Agent': user_agent}

	data = urllib.urlencode(values)
	req = urllib2.Request(url, data, headers)
	response = urllib2.urlopen(req)
	the_page = response.read()
	**********************************************


==========================================================================
Handling Exceptions

URLError ------------------------------------------------
no network connection / the specified server doesnÅft exist
	
	**********************************************
	>>> req = urllib2.Request('http://www.pretend_server.org')
	>>> try: urllib2.urlopen(req)
	... except URLError as e:
	...    print e.reason   
	...
	(4, 'getaddrinfo failed')
	**********************************************

HTTPError ------------------------------------------------
Every HTTP response from the server contains a numeric Ågstatus codeÅh. 
ex. Åe404Åf (page not found), Åe403Åf (request forbidden), and Åe401Åf (authentication required).

Because the default handlers handle redirects (codes in the 300 range), and codes in the 100?299 range indicate success, you will usually only see error codes in the 400?599 range.

	# Table mapping response codes to messages; entries have the
	# form {code: (shortmessage, longmessage)}.
	BaseHTTPServer.BaseHTTPRequestHandler.responses = {
		100: ('Continue', 'Request received, please continue'),
		101: ('Switching Protocols',
			  'Switching to new protocol; obey Upgrade header'),

		200: ('OK', 'Request fulfilled, document follows'),
		201: ('Created', 'Document created, URL follows'),
		202: ('Accepted',
			  'Request accepted, processing continues off-line'),
		203: ('Non-Authoritative Information', 'Request fulfilled from cache'),
		204: ('No Content', 'Request fulfilled, nothing follows'),
		205: ('Reset Content', 'Clear input form for further input.'),
		206: ('Partial Content', 'Partial content follows.'),

		300: ('Multiple Choices',
			  'Object has several resources -- see URI list'),
		301: ('Moved Permanently', 'Object moved permanently -- see URI list'),
		302: ('Found', 'Object moved temporarily -- see URI list'),
		303: ('See Other', 'Object moved -- see Method and URL list'),
		304: ('Not Modified',
			  'Document has not changed since given time'),
		305: ('Use Proxy',
			  'You must use proxy specified in Location to access this '
			  'resource.'),
		307: ('Temporary Redirect',
			  'Object moved temporarily -- see URI list'),

		400: ('Bad Request',
			  'Bad request syntax or unsupported method'),
		401: ('Unauthorized',
			  'No permission -- see authorization schemes'),
		402: ('Payment Required',
			  'No payment -- see charging schemes'),
		403: ('Forbidden',
			  'Request forbidden -- authorization will not help'),
		404: ('Not Found', 'Nothing matches the given URI'),
		405: ('Method Not Allowed',
			  'Specified method is invalid for this server.'),
		406: ('Not Acceptable', 'URI not available in preferred format.'),
		407: ('Proxy Authentication Required', 'You must authenticate with '
			  'this proxy before proceeding.'),
		408: ('Request Timeout', 'Request timed out; try again later.'),
		409: ('Conflict', 'Request conflict.'),
		410: ('Gone',
			  'URI no longer exists and has been permanently removed.'),
		411: ('Length Required', 'Client must specify Content-Length.'),
		412: ('Precondition Failed', 'Precondition in headers is false.'),
		413: ('Request Entity Too Large', 'Entity is too large.'),
		414: ('Request-URI Too Long', 'URI is too long.'),
		415: ('Unsupported Media Type', 'Entity body in unsupported format.'),
		416: ('Requested Range Not Satisfiable',
			  'Cannot satisfy request range.'),
		417: ('Expectation Failed',
			  'Expect condition could not be satisfied.'),

		500: ('Internal Server Error', 'Server got itself in trouble'),
		501: ('Not Implemented',
			  'Server does not support this operation'),
		502: ('Bad Gateway', 'Invalid responses from another server/proxy.'),
		503: ('Service Unavailable',
			  'The server cannot process the request due to a high load'),
		504: ('Gateway Timeout',
			  'The gateway server did not receive a timely response'),
		505: ('HTTP Version Not Supported', 'Cannot fulfill request.'),
		}
		
Handling error
	
	**********************************************
	from urllib2 import Request, urlopen, URLError, HTTPError
	req = Request(someurl)
	try:
		response = urlopen(req)
	except HTTPError as e:
		print 'The server couldn\'t fulfill the request.'
		print 'Error code: ', e.code
	except URLError as e:
		print 'We failed to reach a server.'
		print 'Reason: ', e.reason
	else:
		# everything is fine
	**********************************************
		
or 

	**********************************************
	from urllib2 import Request, urlopen, URLError
	req = Request(someurl)
	try:
		response = urlopen(req)
	except URLError as e:
		if hasattr(e, 'reason'):
			print 'We failed to reach a server.'
			print 'Reason: ', e.reason
		elif hasattr(e, 'code'):
			print 'The server couldn\'t fulfill the request.'
			print 'Error code: ', e.code
	else:
		# everything is fine
	**********************************************
		
		
==========================================================================
info and geturl

The response returned by urlopen (or the HTTPError instance) has two useful methods info() and geturl().

geturl - this returns the real URL of the page fetched. This is useful because urlopen (or the opener object used) may have followed a redirect. The URL of the page fetched may not be the same as the URL requested.

info - this returns a dictionary-like object that describes the page fetched, particularly the headers sent by the server. It is currently an httplib.HTTPMessage instance.


==========================================================================
Openers and Handlers

When you fetch a URL you use an opener (an instance of the perhaps confusingly-named urllib2.OpenerDirector). 
Normally we have been using the default opener - via urlopen - but you can create custom openers. 
Openers use handlers. All the Ågheavy liftingÅh is done by the handlers. 
Each handler knows how to open URLs for a particular URL scheme (http, ftp, etc.), or how to handle an aspect of URL opening, for example HTTP redirections or HTTP cookies.

You will want to create openers if you want to fetch URLs with specific handlers installed, for example to get an opener that handles cookies, or to get an opener that does not handle redirections.

create an opener
	- instantiate an OpenerDirector, and then call .add_handler(some_handler_instance) repeatedly.
	
	Alternatively
	- use build_opener, which is a convenience function for creating opener objects with a single function call. 
	build_opener adds several handlers by default, but provides a quick way to add more and/or override the default handlers.
	
	**********************************************
	>>> opener = urllib2.build_opener()
	>>> opener.addheaders = [('User-Agent', strAgent), ("Accept", "*/*"), ('Referer', strURL)]
	>>> response = opener.open(url)
	>>> html = response.read()
	**********************************************

Other sorts of handlers you might want to can handle proxies, authentication, and other common but slightly specialised situations.

install_opener : make an opener object the (global) default opener. -> calls to urlopen will use the opener you have installed.
	Opener objects have an open method, which can be called directly to fetch urls in the same way as the urlopen function: 
	there's no need to call install_opener, except as a convenience.


	
==========================================================================
Basic Authentication




==========================================================================
Sockets and Layers

The Python support for fetching resources from the web is layered. 
urllib2 uses the httplib library, which in turn uses the socket library.

As of Python 2.3 you can specify how long a socket should wait for a response before timing out. 
This can be useful in applications which have to fetch web pages. 
By default the socket module has no timeout and can hang. 
Currently, the socket timeout is not exposed at the httplib or urllib2 levels. 
However, you can set the default timeout globally for all sockets using

	**********************************************
	import socket
	import urllib2

	# timeout in seconds
	timeout = 10
	socket.setdefaulttimeout(timeout)

	# this call to urllib2.urlopen now uses the default timeout
	# we have set in the socket module
	req = urllib2.Request('http://www.voidspace.org.uk')
	response = urllib2.urlopen(req)
	**********************************************
